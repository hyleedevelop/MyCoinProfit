//
//  CalcResultModalViewController.swift
//  DCA Planner
//
//  Created by Eric on 2023/01/10.
//

import UIKit

final class CalcResultViewController: UIViewController {
    
    let calcVC = CalcViewController()
    let calcResultView = CalcResultView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // CalcViewControllerÎ°úÎ∂ÄÌÑ∞ Îç∞Ïù¥ÌÑ∞Î•º Ï†ÑÎã¨Î∞õ
        calcVC.dataDelegate = self
    
        setupNavBar()
        setupView()
        setupButton()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
    }
    
    override func loadView() {
        view = calcResultView
    }
    
    private func setupNavBar() {
        //navigationItem.title = "ÎèÑÏõÄÎßê"
        let navigationBarAppearance = UINavigationBarAppearance()
        navigationBarAppearance.configureWithOpaqueBackground()
        navigationBarAppearance.shadowColor = .clear
        navigationBarAppearance.backgroundColor = .systemBackground
        navigationBarAppearance.titleTextAttributes = [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 20, weight: .bold)]
        
        // scrollEdge: Ïä§ÌÅ¨Î°§ ÌïòÍ∏∞ Ï†ÑÏùò NavigationBar
        // standard: Ïä§ÌÅ¨Î°§ÏùÑ ÌïòÍ≥† ÏûàÏùÑ ÎïåÏùò NavigationBar
        navigationController?.navigationBar.standardAppearance = navigationBarAppearance
        navigationController?.navigationBar.scrollEdgeAppearance = navigationBarAppearance
        navigationController?.navigationBar.prefersLargeTitles = false
        navigationController?.setNeedsStatusBarAppearanceUpdate()
        navigationController?.navigationBar.isTranslucent = false
        
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(systemName: "xmark"), style: .plain, target: self, action: #selector(closeButtonTapped))
        navigationItem.rightBarButtonItem?.tintColor = .gray
    }
    
    // View ÏÑ§Ï†ï
    private func setupView() {
        view.backgroundColor = .systemBackground
        
        
    }

    // ÌôîÎ©¥ ÌïòÎã®Ïùò Button ÏÑ§Ï†ï
    private func setupButton() {
        calcResultView.resultSaveButton.addTarget(self, action: #selector(resultButtonTapped(_:)), for: .touchUpInside)
        calcResultView.resultShareButton.addTarget(self, action: #selector(resultButtonTapped(_:)), for: .touchUpInside)
    }
    
    @objc private func closeButtonTapped() {
        self.dismiss(animated: true)
    }
     
    @objc private func resultButtonTapped(_ button: UIButton) {
        if button == calcResultView.resultSaveButton {
            
        }
        
        if button == calcResultView.resultShareButton {
            
        }
    }
    
}

// CalcViewControllerÎ°úÎ∂ÄÌÑ∞ Îç∞Ïù¥ÌÑ∞Î•º Ï†ÑÎã¨Î∞õÍ∏∞ ÏúÑÌï¥ Ïª§Ïä§ÌÖÄ ÌîÑÎ°úÌÜ†ÏΩú Ï±ÑÌÉù
extension CalcResultViewController: CalcResultDelegate {
    
    // Ïù¥Ï†Ñ ÌôîÎ©¥ÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Ï†ÑÎã¨Î∞õÏïÑ ÏûëÏóÖÌï† ÎÇ¥Ïö©
    func receiveData(segmentIndex index: Int, with data: Any) {
        if index == 0 {  // ÌïúÎ≤àÏóê Îß§ÏàòÌïòÍ∏∞
            guard let data = data as? CalcResultType1 else { return }
            print("Í≥ÑÏÇ∞ÌôîÎ©¥ÏóêÏÑú Í≤∞Í≥ºÌôîÎ©¥ÏúºÎ°ú Ï†ÑÎã¨ÎêòÎäî Îç∞Ïù¥ÌÑ∞: \(data)")
            
            let amountTotal: String = data.0.toUSD()
            
            let roi: String = data.1.toPercentage()
            let isROIPositive: Bool = data.1 >= 0 ? true : false
            let lossOrGainColor: UIColor = (data.1 >= 0) ? Constant.UIColorSetting.positiveColor
                                                         : Constant.UIColorSetting.negativeColor
            let emoticon: String = data.1 >= 0 ? "üòÅ" : "üò≠"
            
            let profit: String = data.2.toUSDPlusSigned()
            let balance: String = data.3.toUSD()
            let coinType: String = data.4.localizedCapitalized
            
            let buyStartDate: String.SubSequence = data.5[...data.5.index(data.5.startIndex, offsetBy: 12)]  // Î¨∏ÏûêÏó¥ÏóêÏÑú ÏöîÏùº Ï†úÍ±∞Ìïú ÎÇòÎ®∏ÏßÄ Î∂ÄÎ∂Ñ
            let sellDate: String.SubSequence = data.6[...data.6.index(data.6.startIndex, offsetBy: 12)]  // Î¨∏ÏûêÏó¥ÏóêÏÑú ÏöîÏùº Ï†úÍ±∞Ìïú ÎÇòÎ®∏ÏßÄ Î∂ÄÎ∂Ñ
            
            // Label Í∞í ÏÑ§Ï†ï
            calcResultView.leftBarValueLabel.text = amountTotal
            calcResultView.rightBarValueLabel.text = balance
            calcResultView.centerArrowValueLabel.text = "\(profit)\n\(roi)"
            
            // ÌôîÏÇ¥Ìëú ÏúÑÏùò Ïà´Ïûê ÏÉâÏÉÅ ÏÑ§Ï†ï
            let targetText = calcResultView.centerArrowValueLabel.text!
            let attString = NSMutableAttributedString(string: targetText)
            attString.addAttribute(.foregroundColor, value: lossOrGainColor, range: (targetText as NSString).range(of: "\(profit)"))
            attString.addAttribute(.foregroundColor, value: lossOrGainColor, range: (targetText as NSString).range(of: "\(roi)"))
            calcResultView.centerArrowValueLabel.attributedText = attString
            
            // ÏõêÍ∏àÍ≥º ÌèâÍ∞ÄÍ∏àÏùò ÎßâÎåÄ ÎÜíÏù¥ ÏÑ§Ï†ï
            if isROIPositive {  // ÏàòÏùµÎ•† > 0
                let heightRatio: CGFloat = data.0 / data.3
                //calcResultView.rightBar.heightAnchor.constraint(equalToConstant: 175).isActive = true
                calcResultView.rightBar.topAnchor.constraint(equalTo: calcResultView.graphContainerView.topAnchor, constant: 25).isActive = true
                calcResultView.leftBar.heightAnchor.constraint(equalTo: calcResultView.rightBar.heightAnchor, multiplier: heightRatio).isActive = true
            } else {  // ÏàòÏùµÎ•† < 0
                let heightRatio: CGFloat = data.3 / data.0
                //calcResultView.leftBar.heightAnchor.constraint(equalToConstant: 175).isActive = true
                calcResultView.leftBar.topAnchor.constraint(equalTo: calcResultView.graphContainerView.topAnchor, constant: 25).isActive = true
                calcResultView.rightBar.heightAnchor.constraint(equalTo: calcResultView.leftBar.heightAnchor, multiplier: heightRatio).isActive = true
            }
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 1Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[0].text = "\(coinType)ÏùÑ"
            let targetText0 = calcResultView.summaryLabel[0].text!
            let attString0 = NSMutableAttributedString(string: targetText0)
            attString0.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText0 as NSString).range(of: "\(coinType)"))
            calcResultView.summaryLabel[0].attributedText = attString0
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 2Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[1].text = "\(buyStartDate)Ïóê Îß§ÏàòÌïòÍ≥†"
            let targetText1 = calcResultView.summaryLabel[1].text!
            let attString1 = NSMutableAttributedString(string: targetText1)
            attString1.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText1 as NSString).range(of: "\(buyStartDate)"))
            calcResultView.summaryLabel[1].attributedText = attString1
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 3Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[2].text = "\(sellDate)Ïóê Îß§ÎèÑÌïòÎ©¥"
            let targetText2 = calcResultView.summaryLabel[2].text!
            let attString2 = NSMutableAttributedString(string: targetText2)
            attString2.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText2 as NSString).range(of: "\(sellDate)"))
            calcResultView.summaryLabel[2].attributedText = attString2
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 4Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[3].text = "ÏàòÏùµÎ•†Ïù¥ \(roi)ÏûÖÎãàÎã§ \(emoticon)"
            let targetText3 = calcResultView.summaryLabel[3].text!
            let attString3 = NSMutableAttributedString(string: targetText3)
            attString3.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText3 as NSString).range(of: "\(roi)"))
            attString3.addAttribute(.foregroundColor, value: lossOrGainColor, range: (targetText3 as NSString).range(of: "\(roi)"))
            calcResultView.summaryLabel[3].attributedText = attString3
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 5~6Î≤àÏß∏ Ï§ÑÏùÄ ÌïÑÏöî ÏóÜÏúºÎØÄÎ°ú ÏÉÅÏúÑ Î∑∞ÏóêÏÑú Ï†úÍ±∞
            calcResultView.summaryLabel[4].removeFromSuperview()
            calcResultView.summaryLabel[5].removeFromSuperview()
            
            // Í∑∏ÎûòÌîÑÍ∞Ä Îì§Ïñ¥Í∞à ÏòÅÏó≠Ïù¥ ÎßàÏßÄÎßâ summaryLabelÍ≥º Îñ®Ïñ¥Ï†∏ ÏûàÎäî Í±∞Î¶¨ ÏÑ§Ï†ï
            calcResultView.graphContainerView.topAnchor.constraint(equalTo: calcResultView.summaryLabel[3].bottomAnchor, constant: 40).isActive = true
        }
    
        if index == 1 {  // ÎÇòÎà†ÏÑú Îß§ÏàòÌïòÍ∏∞
            guard let data = data as? CalcResultType2 else { return }
            print("Í≥ÑÏÇ∞ÌôîÎ©¥ÏóêÏÑú Í≤∞Í≥ºÌôîÎ©¥ÏúºÎ°ú Ï†ÑÎã¨ÎêòÎäî Îç∞Ïù¥ÌÑ∞: \(data)")
            
            let amountTotal: String = data.0.toUSD()
            
            let roi: String = data.1.toPercentage()
            let isROIPositive: Bool = data.1 >= 0 ? true : false
            let lossOrGainColor: UIColor = (data.1 >= 0) ? Constant.UIColorSetting.positiveColor
                                                         : Constant.UIColorSetting.negativeColor
            let emoticon: String = data.1 >= 0 ? "üòÅ" : "üò≠"
            
            let profit: String = data.2.toUSDPlusSigned()
            let balance: String = data.3.toUSD()
            let coinType: String = data.4.localizedCapitalized
            
            let buyStartDate: String.SubSequence = data.5[...data.5.index(data.5.startIndex, offsetBy: 12)]  // Î¨∏ÏûêÏó¥ÏóêÏÑú ÏöîÏùº Ï†úÍ±∞Ìïú ÎÇòÎ®∏ÏßÄ Î∂ÄÎ∂Ñ
            let buyEndDate: String.SubSequence = data.6[...data.6.index(data.6.startIndex, offsetBy: 12)]  // Î¨∏ÏûêÏó¥ÏóêÏÑú ÏöîÏùº Ï†úÍ±∞Ìïú ÎÇòÎ®∏ÏßÄ Î∂ÄÎ∂Ñ
            let sellDate: String.SubSequence = data.7[...data.7.index(data.7.startIndex, offsetBy: 12)]  // Î¨∏ÏûêÏó¥ÏóêÏÑú ÏöîÏùº Ï†úÍ±∞
            
            let frequency: String = data.8
            let amountEach: String = "\(data.9)Îã¨Îü¨"
            
            // Label Í∞í ÏÑ§Ï†ï
            calcResultView.leftBarValueLabel.text = amountTotal
            calcResultView.rightBarValueLabel.text = balance
            calcResultView.centerArrowValueLabel.text = "\(profit)\n\(roi)"
            
            // ÌôîÏÇ¥Ìëú ÏúÑÏùò Ïà´Ïûê ÏÉâÏÉÅ ÏÑ§Ï†ï
            let targetText = calcResultView.centerArrowValueLabel.text!
            let attString = NSMutableAttributedString(string: targetText)
            attString.addAttribute(.foregroundColor, value: lossOrGainColor, range: (targetText as NSString).range(of: "\(profit)"))
            attString.addAttribute(.foregroundColor, value: lossOrGainColor, range: (targetText as NSString).range(of: "\(roi)"))
            calcResultView.centerArrowValueLabel.attributedText = attString
            
            // ÏõêÍ∏àÍ≥º ÌèâÍ∞ÄÍ∏àÏùò ÎßâÎåÄ ÎÜíÏù¥Î•º ÏàòÏùµÎ•†Ïù¥ ÏñëÏàòÏù∏ÏßÄ ÏùåÏàòÏù∏ÏßÄÏóê Îî∞Îùº Îã§Î•¥Í≤å ÏÑ§Ï†ï
            if isROIPositive {  // ÏàòÏùµÎ•† > 0
                let heightRatio: CGFloat = data.0 / data.3
                //calcResultView.rightBar.heightAnchor.constraint(equalToConstant: 175).isActive = true
                calcResultView.rightBar.topAnchor.constraint(equalTo: calcResultView.graphContainerView.topAnchor, constant: 25).isActive = true
                calcResultView.leftBar.heightAnchor.constraint(equalTo: calcResultView.rightBar.heightAnchor, multiplier: heightRatio).isActive = true
            } else {  // ÏàòÏùµÎ•† < 0
                let heightRatio: CGFloat = data.3 / data.0
                //calcResultView.leftBar.heightAnchor.constraint(equalToConstant: 175).isActive = true
                calcResultView.leftBar.topAnchor.constraint(equalTo: calcResultView.graphContainerView.topAnchor, constant: 25).isActive = true
                calcResultView.rightBar.heightAnchor.constraint(equalTo: calcResultView.leftBar.heightAnchor, multiplier: heightRatio).isActive = true
            }
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 1Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[0].text = "\(coinType)ÏùÑ"
            let targetText0 = calcResultView.summaryLabel[0].text!
            let attString0 = NSMutableAttributedString(string: targetText0)
            attString0.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText0 as NSString).range(of: "\(coinType)"))
            calcResultView.summaryLabel[0].attributedText = attString0
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 2Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[1].text = "\(buyStartDate)Î∂ÄÌÑ∞"
            let targetText1 = calcResultView.summaryLabel[1].text!
            let attString1 = NSMutableAttributedString(string: targetText1)
            attString1.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText1 as NSString).range(of: "\(buyStartDate)"))
            calcResultView.summaryLabel[1].attributedText = attString1
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 3Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[2].text = "\(buyEndDate)ÍπåÏßÄ"
            let targetText2 = calcResultView.summaryLabel[2].text!
            let attString2 = NSMutableAttributedString(string: targetText2)
            attString2.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText2 as NSString).range(of: "\(buyEndDate)"))
            calcResultView.summaryLabel[2].attributedText = attString2
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 4Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[3].text = "\(frequency) \(amountEach)Ïî© Îß§ÏàòÌïòÍ≥†"
            let targetText3 = calcResultView.summaryLabel[3].text!
            let attString3 = NSMutableAttributedString(string: targetText3)
            attString3.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText3 as NSString).range(of: "\(frequency)"))
            attString3.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText3 as NSString).range(of: "\(amountEach)"))
            calcResultView.summaryLabel[3].attributedText = attString3
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 5Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[4].text = "\(sellDate)Ïóê Îß§ÎèÑÌïòÎ©¥"
            let targetText4 = calcResultView.summaryLabel[4].text!
            let attString4 = NSMutableAttributedString(string: targetText4)
            attString4.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText4 as NSString).range(of: "\(sellDate)"))
            calcResultView.summaryLabel[4].attributedText = attString4
            
            // Í≤∞Í≥º ÏöîÏïΩ Î¨∏Íµ¨ 6Î≤àÏß∏ Ï§Ñ ÏÑ§Ï†ï
            calcResultView.summaryLabel[5].text = "ÏàòÏùµÎ•†Ïù¥ \(roi)ÏûÖÎãàÎã§ \(emoticon)"
            let targetText5 = calcResultView.summaryLabel[5].text!
            let attString5 = NSMutableAttributedString(string: targetText5)
            attString5.addAttribute(.font, value: UIFont.systemFont(ofSize: Constant.SizeSetting.summaryLabelBigFontSize, weight: Constant.SizeSetting.summaryLabelBigFontWeight), range: (targetText5 as NSString).range(of: "\(roi)"))
            attString5.addAttribute(.foregroundColor, value: lossOrGainColor, range: (targetText5 as NSString).range(of: "\(roi)"))
            calcResultView.summaryLabel[5].attributedText = attString5
        }
    }
    
}
